"""
ДИАГРАММА ПОТОКОВ ДАННЫХ (DFD)
АИС "Телефонный справочник"
"""

class DataFlowDiagram:
    def __init__(self):
        self.processes = [
            "Обработка добавления контакта",
            "Обработка поиска контакта", 
            "Управление базой данных",
            "Валидация входных данных"
        ]
        self.data_stores = [
            "База данных контактов",
            "Кэш поисковых запросов"
        ]
        self.external_entities = [
            "Пользователь",
            "Системный администратор"
        ]
        self.data_flows = [
            "Пользователь → Обработка добавления: Данные нового контакта",
            "Обработка добавления → Управление БД: Запрос на сохранение",
            "Управление БД → База данных: Сохранение записи",
            "Пользователь → Обработка поиска: Поисковый запрос",
            "Обработка поиска → Управление БД: Запрос на поиск",
            "Управление БД → База данных: Поиск записей",
            "База данных → Управление БД: Результаты поиска",
            "Управление БД → Обработка поиска: Найденные контакты",
            "Обработка поиска → Пользователь: Список контактов"
        ]
    
    def display(self):
        print("ДИАГРАММА ПОТОКОВ ДАННЫХ (DFD)")
        print("=" * 40)
        
        print("\nПроцессы:")
        for process in self.processes:
            print(f"- {process}")
            
        print("\nХранилища данных:")
        for store in self.data_stores:
            print(f"- {store}")
            
        print("\nВнешние сущности:")
        for entity in self.external_entities:
            print(f"- {entity}")
            
        print("\nПотоки данных:")
        for flow in self.data_flows:
            print(f"- {flow}")

# Создаем и отображаем диаграмму
dfd = DataFlowDiagram()
dfd.display()