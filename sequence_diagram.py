"""
ДИАГРАММА ПОСЛЕДОВАТЕЛЬНОСТИ
Сценарий: Добавление нового контакта

Участники:
- Пользователь
- Интерфейс (GUI)
- Менеджер контактов (ContactManager)
- База данных (Database)

Последовательность:
1. Пользователь вводит данные контакта
2. GUI получает данные
3. GUI передает данные в ContactManager
4. ContactManager валидирует данные
5. ContactManager сохраняет в Database
6. Database подтверждает сохранение
7. ContactManager возвращает результат
8. GUI показывает сообщение об успехе
"""

class SequenceDiagram:
    def __init__(self):
        self.scenario = "Добавление нового контакта"
        self.participants = [
            "Пользователь",
            "Интерфейс (GUI)",
            "Менеджер контактов",
            "База данных"
        ]
        self.sequence = [
            "Пользователь → Интерфейс: Ввод данных контакта",
            "Интерфейс → Менеджер контактов: Передача данных",
            "Менеджер контактов: Валидация данных",
            "Менеджер контактов → База данных: Сохранение",
            "База данных → Менеджер контактов: Подтверждение",
            "Менеджер контактов → Интерфейс: Результат",
            "Интерфейс → Пользователь: Сообщение об успехе"
        ]
    
    def display(self):
        print(f"Сценарий: {self.scenario}")
        print("Участники:", ", ".join(self.participants))
        print("\nПоследовательность действий:")
        for step in self.sequence:
            print(f"- {step}")

# Создаем и отображаем диаграмму
seq_diagram = SequenceDiagram()
seq_diagram.display()