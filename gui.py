"""
–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
–ê–ò–° "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
"""

import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from database import Database

class PhoneBookGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db = Database()
        self.db.connect()
        self.db.create_tables()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        self.load_contacts()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.root, text="üìû –¢–ï–õ–ï–§–û–ù–ù–´–ô –°–ü–†–ê–í–û–ß–ù–ò–ö", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
        search_frame = ttk.Frame(self.root)
        search_frame.pack(pady=10, padx=20, fill=tk.X)
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT, padx=5)
        self.search_entry = ttk.Entry(search_frame, width=30)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        self.search_entry.bind('<KeyRelease>', self.search_contacts)
        
        search_btn = ttk.Button(search_frame, text="–ù–∞–π—Ç–∏", command=self.search_contacts)
        search_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10)
        
        ttk.Button(button_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", 
                  command=self.add_contact).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.edit_contact).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                  command=self.delete_contact).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.load_contacts).pack(side=tk.LEFT, padx=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        table_frame = ttk.Frame(self.root)
        table_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        columns = ("ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
        self.contacts_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.contacts_tree.heading(col, text=col)
            self.contacts_tree.column(col, width=100)
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.contacts_tree.yview)
        self.contacts_tree.configure(yscrollcommand=scrollbar.set)
        
        self.contacts_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.contacts_tree.bind("<Double-1>", self.on_double_click)
    
    def load_contacts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.contacts_tree.get_children():
            self.contacts_tree.delete(item)
        
        try:
            cursor = self.db.connection.cursor()
            cursor.execute("SELECT * FROM contacts ORDER BY first_name, last_name")
            contacts = cursor.fetchall()
            
            for contact in contacts:
                self.contacts_tree.insert("", tk.END, values=contact)
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: {e}")
    
    def search_contacts(self, event=None):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        query = self.search_entry.get().strip()
        
        if not query:
            self.load_contacts()
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.contacts_tree.get_children():
            self.contacts_tree.delete(item)
        
        try:
            cursor = self.db.connection.cursor()
            cursor.execute('''
                SELECT * FROM contacts 
                WHERE first_name LIKE ? OR last_name LIKE ? OR phone LIKE ? OR email LIKE ?
                ORDER BY first_name, last_name
            ''', (f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%'))
            
            contacts = cursor.fetchall()
            
            for contact in contacts:
                self.contacts_tree.insert("", tk.END, values=contact)
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def add_contact(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        self.show_contact_form()
    
    def edit_contact(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        selected = self.contacts_tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        item = selected[0]
        contact_data = self.contacts_tree.item(item)['values']
        self.show_contact_form(contact_data)
    
    def delete_contact(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        selected = self.contacts_tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç?"):
            item = selected[0]
            contact_id = self.contacts_tree.item(item)['values'][0]
            
            try:
                cursor = self.db.connection.cursor()
                cursor.execute("DELETE FROM contacts WHERE id = ?", (contact_id,))
                self.db.connection.commit()
                self.load_contacts()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {e}")
    
    def on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
        self.edit_contact()
    
    def show_contact_form(self, contact_data=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        form = tk.Toplevel(self.root)
        form.title("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if not contact_data else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        form.geometry("450x350")
        form.resizable(False, False)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        main_frame = ttk.Frame(form, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ttk.Label(main_frame, text="–ò–º—è:*", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky=tk.W, pady=5)
        first_name_entry = ttk.Entry(main_frame, width=30, font=("Arial", 10))
        first_name_entry.grid(row=0, column=1, pady=5, padx=10, sticky=tk.W)
        
        ttk.Label(main_frame, text="–§–∞–º–∏–ª–∏—è:*", font=("Arial", 10, "bold")).grid(row=1, column=0, sticky=tk.W, pady=5)
        last_name_entry = ttk.Entry(main_frame, width=30, font=("Arial", 10))
        last_name_entry.grid(row=1, column=1, pady=5, padx=10, sticky=tk.W)
        
        ttk.Label(main_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:*", font=("Arial", 10, "bold")).grid(row=2, column=0, sticky=tk.W, pady=5)
        phone_entry = ttk.Entry(main_frame, width=30, font=("Arial", 10))
        phone_entry.grid(row=2, column=1, pady=5, padx=10, sticky=tk.W)
        
        ttk.Label(main_frame, text="Email:", font=("Arial", 10)).grid(row=3, column=0, sticky=tk.W, pady=5)
        email_entry = ttk.Entry(main_frame, width=30, font=("Arial", 10))
        email_entry.grid(row=3, column=1, pady=5, padx=10, sticky=tk.W)
        
        ttk.Label(main_frame, text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:", font=("Arial", 10)).grid(row=4, column=0, sticky=tk.W, pady=5)
        org_entry = ttk.Entry(main_frame, width=30, font=("Arial", 10))
        org_entry.grid(row=4, column=1, pady=5, padx=10, sticky=tk.W)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
        help_label = ttk.Label(main_frame, text="* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", font=("Arial", 8), foreground="gray")
        help_label.grid(row=5, column=0, columnspan=2, pady=10)
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        if contact_data:
            first_name_entry.insert(0, contact_data[1])
            last_name_entry.insert(0, contact_data[2])
            phone_entry.insert(0, contact_data[3])
            email_entry.insert(0, contact_data[4] if contact_data[4] else "")
            org_entry.insert(0, contact_data[5] if contact_data[5] else "")
        
        def save_contact():
            """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
            first_name = first_name_entry.get().strip()
            last_name = last_name_entry.get().strip()
            phone = phone_entry.get().strip()
            email = email_entry.get().strip()
            organization = org_entry.get().strip()
            
            if not first_name or not last_name or not phone:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ò–º—è, –§–∞–º–∏–ª–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω)")
                return
            
            try:
                cursor = self.db.connection.cursor()
                
                if contact_data:  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    cursor.execute('''
                        UPDATE contacts 
                        SET first_name=?, last_name=?, phone=?, email=?, organization=?
                        WHERE id=?
                    ''', (first_name, last_name, phone, email, organization, contact_data[0]))
                else:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                    cursor.execute('''
                        INSERT INTO contacts (first_name, last_name, phone, email, organization)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (first_name, last_name, phone, email, organization))
                
                self.db.connection.commit()
                form.destroy()
                self.load_contacts()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
            except sqlite3.IntegrityError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {e}")
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É —Ñ–æ—Ä–º—ã
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=6, column=0, columnspan=2, pady=20)
        
        # –ö–ù–û–ü–ö–ò –°–û–•–†–ê–ù–ò–¢–¨ –ò –û–¢–ú–ï–ù–ê (—Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —Ç–æ—á–Ω–æ –≤–∏–¥–Ω—ã!)
        save_btn = ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                             command=save_contact)
        save_btn.pack(side=tk.LEFT, padx=10)
        
        cancel_btn = ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                               command=form.destroy)
        cancel_btn.pack(side=tk.LEFT, padx=10)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
        first_name_entry.focus()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        form.bind('<Return>', lambda event: save_contact())
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()
        # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        self.db.close()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = PhoneBookGUI()
    app.run()